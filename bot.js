// bot.js
import TelegramBot from 'node-telegram-bot-api';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import axios from 'axios';
import sharp from 'sharp';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const postStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
function getPostState(chatId) {
  if (!postStates[chatId]) {
    postStates[chatId] = {};
  }
  return postStates[chatId];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function clearPostState(chatId) {
  delete postStates[chatId];
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_post, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_post
bot.onText(/\/create_post/, (msg) => {
  const chatId = msg.chat.id;
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  clearPostState(chatId);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const state = getPostState(chatId);
  state.step = 'title';
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const state = getPostState(chatId);

  if (!state.step) {
    bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ /create_post, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å.');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
  if (!text && state.step !== 'image') {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    return;
  }

  if (state.step === 'title') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    state.title = text;

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    state.step = 'content';
    bot.sendMessage(chatId, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:');
  } else if (state.step === 'content') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
    state.content = text;

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    state.step = 'image';
    bot.sendMessage(chatId, '–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".');
  } else if (state.step === 'image') {
    if (text && text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      state.image = null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      showPreview(chatId, state);
    } else {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const state = getPostState(chatId);

  if (state.step === 'image') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
      const photoFileId = msg.photo[msg.photo.length - 1].file_id;

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Telegram
      const fileLink = await bot.getFileLink(photoFileId);
      const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
      const imageBuffer = response.data;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = `${Date.now()}_${Math.random().toString(36).substring(7)}.jpg`;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase
      const { data, error } = await supabase.storage
        .from('news-images')
        .upload(fileName, imageBuffer, {
          contentType: 'image/jpeg',
        });

      if (error) {
        console.error('[ERROR] Failed to upload image to Supabase:', error.message);
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      state.image = `${process.env.SUPABASE_URL}/storage/v1/object/public/news-images/${fileName}`;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
      showPreview(chatId, state);
    } catch (err) {
      console.error('[ERROR] Failed to process image:', err.message);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function showPreview(chatId, state) {
  let previewText = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${state.title}\n\n–¢–µ–∫—Å—Ç: ${state.content}`;
  if (state.image) {
    previewText += '\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ';
  } else {
    previewText += '\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå (–ø—Ä–æ–ø—É—â–µ–Ω–æ)';
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }],
        [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }],
      ],
    },
  };

  bot.sendMessage(chatId, previewText, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const state = getPostState(chatId);

  if (data === 'publish') {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { data, error } = await supabase
        .from('news')
        .insert([{ 
          title: state.title,
          content: state.content,
          image_url: state.image || null,
          created_at: new Date().toISOString()
        }])
        .select();

      if (error) throw error;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
      try {
        const groupChatId = process.env.TELEGRAM_CHAT_ID;
        let message = `üì¢ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!\n\n${state.title}\n\n${state.content}`;
        
        if (state.image) {
          await bot.sendPhoto(groupChatId, state.image, { caption: message });
        } else {
          await bot.sendMessage(groupChatId, message);
        }
      } catch (telegramError) {
        if (telegramError.response?.body?.parameters?.migrate_to_chat_id) {
          // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          const newChatId = telegramError.response.body.parameters.migrate_to_chat_id;
          console.log(`–ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É. –ù–æ–≤—ã–π chat_id: ${newChatId}`);
          process.env.TELEGRAM_CHAT_ID = newChatId;
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –Ω–æ–≤—ã–º chat_id
          let message = `üì¢ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!\n\n${state.title}\n\n${state.content}`;
          if (state.image) {
            await bot.sendPhoto(newChatId, state.image, { caption: message });
          } else {
            await bot.sendMessage(newChatId, message);
          }
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', telegramError);
        }
      }

      bot.sendMessage(chatId, '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
      clearPostState(chatId);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', err.message);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.');
    }
  } else if (data === 'cancel') {
    clearPostState(chatId);
    bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
export default bot;