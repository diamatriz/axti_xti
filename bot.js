// bot.js
import TelegramBot from 'node-telegram-bot-api';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import axios from 'axios';
import sharp from 'sharp';
import express from 'express';
import cors from 'cors';
import { Telegraf } from 'telegraf';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
  console.error('–û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false
    }
  }
);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
const botState = {
  awaitingTitle: false,
  awaitingText: false,
  awaitingImage: false,
  currentNews: null,
  currentStep: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
const formatNews = (news) => {
  return `üì∞ *${news.title}*\n\n${news.text}\n\nüïí ${new Date(news.created_at).toLocaleString()}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏
const formatPreview = (news) => {
  let preview = `üì∞ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–∏*\n\n`;
  preview += `*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* ${news.title || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
  preview += `*–¢–µ–∫—Å—Ç:* ${news.content || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
  preview += `*–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:* ${news.image_url ? '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n`;
  preview += `_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_`;
  return preview;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
const createPreviewKeyboard = (news) => {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úèÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫', callback_data: 'edit_title' },
          { text: '‚úèÔ∏è –¢–µ–∫—Å—Ç', callback_data: 'edit_content' }
        ],
        [
          { text: '‚úèÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data: 'edit_image' }
        ],
        [
          { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }
        ]
      ]
    }
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
const getNewsList = async () => {
  const { data, error } = await supabase
    .from('news')
    .select('*')
    .order('created_at', { ascending: false });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    return null;
  }
  return data;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
const deleteNews = async (newsId) => {
  const { error } = await supabase
    .from('news')
    .delete()
    .eq('id', newsId);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', error);
    return false;
  }
  return true;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const createNavigationKeyboard = (step) => {
  const keyboard = {
    reply_markup: {
      inline_keyboard: []
    }
  };

  switch (step) {
    case 'title':
      keyboard.reply_markup.inline_keyboard.push([
        { text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'next_step' }
      ]);
      break;
    case 'content':
      keyboard.reply_markup.inline_keyboard.push([
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'prev_step' },
        { text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'next_step' }
      ]);
      break;
    case 'image':
      keyboard.reply_markup.inline_keyboard.push([
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'prev_step' },
        { text: '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_image' }
      ]);
      break;
    case 'preview':
      keyboard.reply_markup.inline_keyboard.push([
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'prev_step' },
        { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }
      ]);
      break;
  }

  return keyboard;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'],
        ['üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π'],
        ['‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å']
      ],
      resize_keyboard: true
    }
  };

  await ctx.reply(
    'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏!\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    keyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
bot.hears('üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', (ctx) => {
  botState.currentNews = {};
  botState.currentStep = 'title';
  botState.awaitingTitle = true;
  
  const keyboard = createNavigationKeyboard('title');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:', keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"
bot.hears('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π', async (ctx) => {
  const newsList = await getNewsList();
  
  if (!newsList || newsList.length === 0) {
    return ctx.reply('–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.');
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
  const firstNews = newsList[0];
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: 'prev_news' },
          { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: 'next_news' }
        ],
        [
          { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${firstNews.id}` }
        ]
      ]
    }
  };

  await ctx.replyWithMarkdown(formatNews(firstNews), keyboard);
  botState.currentNewsIndex = 0;
  botState.newsList = newsList;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
bot.hears('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', async (ctx) => {
  const newsList = await getNewsList();
  
  if (!newsList || newsList.length === 0) {
    return ctx.reply('–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.');
  }

  const keyboard = {
    reply_markup: {
      inline_keyboard: newsList.map(news => [
        { text: news.title, callback_data: `delete_${news.id}` }
      ])
    }
  };

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  if (botState.awaitingTitle) {
    if (botState.currentStep === 'edit_title') {
      botState.currentNews.title = ctx.message.text;
      const preview = formatPreview(botState.currentNews);
      const keyboard = createPreviewKeyboard(botState.currentNews);
      await ctx.replyWithMarkdown(preview, keyboard);
    } else {
      botState.currentNews.title = ctx.message.text;
      botState.awaitingTitle = false;
      botState.awaitingText = true;
      botState.currentStep = 'content';
      const keyboard = createNavigationKeyboard('content');
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:', keyboard);
    }
  } else if (botState.awaitingText) {
    if (botState.currentStep === 'edit_content') {
      botState.currentNews.content = ctx.message.text;
      const preview = formatPreview(botState.currentNews);
      const keyboard = createPreviewKeyboard(botState.currentNews);
      await ctx.replyWithMarkdown(preview, keyboard);
    } else {
      botState.currentNews.content = ctx.message.text;
      botState.awaitingText = false;
      botState.awaitingImage = true;
      botState.currentStep = 'image';
      const keyboard = createNavigationKeyboard('image');
      ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏:', keyboard);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
bot.on('photo', async (ctx) => {
  if (botState.awaitingImage) {
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const file = await ctx.telegram.getFile(photo.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    
    botState.currentNews.image_url = fileUrl;
    
    if (botState.currentStep === 'edit_image') {
      const preview = formatPreview(botState.currentNews);
      const keyboard = createPreviewKeyboard(botState.currentNews);
      await ctx.replyWithMarkdown(preview, keyboard);
    } else {
      botState.awaitingImage = false;
      botState.currentStep = 'preview';
      const preview = formatPreview(botState.currentNews);
      const keyboard = createPreviewKeyboard(botState.currentNews);
      await ctx.replyWithMarkdown(preview, keyboard);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /skip
bot.command('skip', async (ctx) => {
  if (botState.awaitingImage) {
    await saveNews(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  
  if (data === 'next_news' || data === 'prev_news') {
    const newsList = botState.newsList;
    if (!newsList) return;

    if (data === 'prev_news') {
      botState.currentNewsIndex = (botState.currentNewsIndex - 1 + newsList.length) % newsList.length;
    } else {
      botState.currentNewsIndex = (botState.currentNewsIndex + 1) % newsList.length;
    }

    const currentNews = newsList[botState.currentNewsIndex];
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: 'prev_news' },
            { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: 'next_news' }
          ],
          [
            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${currentNews.id}` }
          ]
        ]
      }
    };

    await ctx.editMessageText(formatNews(currentNews), { ...keyboard, parse_mode: 'Markdown' });
    await ctx.answerCbQuery();
  } else if (data.startsWith('delete_')) {
    const newsId = data.split('_')[1];
    const success = await deleteNews(newsId);
    
    if (success) {
      await ctx.answerCbQuery('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
      await ctx.deleteMessage();
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏');
    }
  } else if (data === 'edit_title') {
    botState.currentStep = 'edit_title';
    botState.awaitingTitle = true;
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:');
  } else if (data === 'edit_content') {
    botState.currentStep = 'edit_content';
    botState.awaitingText = true;
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:');
  } else if (data === 'edit_image') {
    botState.currentStep = 'edit_image';
    botState.awaitingImage = true;
    await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:');
  } else if (data === 'publish') {
    await saveNews(ctx);
  }
  
  await ctx.answerCbQuery();
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
const saveNews = async (ctx) => {
  const { title, content, image_url } = botState.currentNews;
  
      const { data, error } = await supabase
        .from('news')
    .insert([{ title, content, image_url }]);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏');
        } else {
    ctx.reply('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  botState.awaitingImage = false;
  botState.currentNews = null;
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();
app.use(cors());
app.use(express.json());

// Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json');
  next();
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
app.get('/api/news', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('news')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase error:', error);
      return res.status(500).json({ error: 'Database error' });
    }

    if (!data) {
      return res.status(200).json([]);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedData = data.map(item => ({
      id: item.id,
      title: item.title || '',
      content: item.content || '',
      image_url: item.image_url || null,
      created_at: item.created_at || new Date().toISOString()
    }));

    res.json(formattedData);
  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
export default bot;